@page "/TraceDetails"
@using System.Text.Json;
@using OpenTracer.Core;
@model WebAPI.Pages.TraceDetailsModel
@{

}

<h1>Trace Details - @Model.Id</h1>

<div class="row">
    <div class="col-md-4">
        <canvas id="cpuUsage"></canvas>
    </div>
    <div class="col-md-4">
        <canvas id="memoryUsage"></canvas>
    </div>
    <div class="col-md-4">
        <canvas id="statusChart"></canvas>
    </div>
    <div class="col-md-12">
        <table class="table table-striped">
            <thead>
                <tr>
                    <td>Date & Time</td>
                    <td>Trace Name</td>
                    <td>Trace Description</td>
                    <td>Status</td>
                    <td>CPU Usage (%)</td>
                    <td>Memory Usage (MB)</td>
                    <td>Error Message</td>
                    <td>Stack Trace</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.TraceMap.Details.Skip((Model.Page.Value - 1) * Model.PageSize).Take(Model.PageSize))
                {
                    <tr>
                        <td>
                            @item.EventDateTime
                        </td>
                        <td>
                            @item.TraceName
                        </td>
                        <td>
                            @item.TraceDescription
                        </td>
                        <td>
                            @((TraceStatus)item.Status)
                        </td>
                        <td>
                            @item.CpuUsage
                        </td>
                        <td>
                            @item.MemoryUsage
                        </td>
                        <td>
                            @item.ErrorMessage
                        </td>
                        <td>
                            @item.StackTrace
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <nav aria-label="Page navigation example">
            <ul class="pagination">
                @for (int i = 1; i < Model.TotalPages + 1; i++)
                {
                    <li class="page-item @String.Format("{0}", Model.Page  == i ? "active disabled" : "")"><a class="page-link" href="TraceDetails?id=@Model.Id&page=@i">@i</a></li>
                }
            </ul>
        </nav>
    </div>
</div>

@section Scripts{
    <script>
        const ctx = document.getElementById('cpuUsage');

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.TraceMap.Details.Select(y => y.TraceName).ToList())),
                datasets: [{
                    label: 'CPU Usage',
                    data: @Html.Raw(Json.Serialize(Model.TraceMap.Details.Select(y => y.CpuUsage).ToList())),
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        const memoryUsage = document.getElementById('memoryUsage');

        new Chart(memoryUsage, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.TraceMap.Details.Select(y => y.TraceName).ToList())),
                datasets: [{
                    label: 'Memory Usage',
                    data: @Html.Raw(Json.Serialize(Model.TraceMap.Details.Select(y => y.MemoryUsage).ToList())),
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        const statusChart = document.getElementById('statusChart');

        new Chart(statusChart, {
            type: 'bar',
            data: {
                labels: ["Success", "Error"],
                datasets: [{
                    label: 'Status',
                    data: @Html.Raw(Json.Serialize(new int[2] { Model.TraceMap.Details.Count(y => y.Status == (int)TraceStatus.Success), Model.TraceMap.Details.Count(y => y.Status == (int)TraceStatus.Failed)})),
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
}